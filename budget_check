#!/usr/bin/env python3
import json
import pandas as pd
import argparse
from ynab_averages import get_ynab_spending_averages

def load_budget(file_path):
    """Load budget data from a JSON file."""
    with open(file_path, 'r') as file:
        return json.load(file)

def compare_averages_with_budget(averages, budget):
    """Compare spending averages with budget amounts."""
    differences = []
    for category, budget_amount in budget.items():
        average = averages.get(category, 0)  # Default to 0 if category is not in the budget
        average = -average if average != 0 else 0  # Convert to amount spent
        difference = budget_amount - average
        percent = difference / budget_amount * 100 if budget_amount != 0 else 0
        differences.append({
            'Category': category,
            'Average': average,
            'Budget': budget_amount,
            'Difference': difference,
            'Percent': percent
        })
    return differences

def main():
    # Parse command-line arguments
    parser = argparse.ArgumentParser(description='Compare YNAB spending averages with budget data.')
    parser.add_argument('budget_file', type=str, help='Path to the budget JSON file')
    args = parser.parse_args()

    # Load budget data
    budget_data = load_budget(args.budget_file)

    # Get spending averages for 1, 3, and 12 months
    n_months_list = [1, 3, 12]
    spending_data = get_ynab_spending_averages(n_months_list)

    # Create a DataFrame to store all comparisons
    all_differences = []

    # Compare each set of averages with the budget
    for item in spending_data:
        n_months = item['months']
        averages = item['averages']
        differences = compare_averages_with_budget(averages, budget_data['budget'])
        for diff in differences:
            diff['Months'] = n_months  # Add the number of months to each row
        all_differences.extend(differences)

    # Convert the results to a pandas DataFrame
    df = pd.DataFrame(all_differences)

    # Set the column data type to currency for Average, Budget, and Difference
    currency_columns = ['Average', 'Budget', 'Difference']
    for col in currency_columns:
        df[col] = df[col].apply(lambda x: f"${x:,.2f}")

    # Set the column data type to percentage for Percent
    df['Percent'] = df['Percent'].apply(lambda x: f"{x:.2f}%")

    # Sort the DataFrame by the category name then by the 'Months' column
    df.sort_values(by=['Category', 'Months'], inplace=True)

    # Print the DataFrame
    print(df)

if __name__ == '__main__':
    main()