#!/usr/bin/env python3
import json
import pandas as pd
import argparse
import datetime
from openpyxl import load_workbook
from openpyxl.styles import PatternFill
from openpyxl.formatting.rule import CellIsRule
from ynab_averages import get_ynab_spending_averages

def load_budget(file_path):
    """Load budget data from a JSON file."""
    with open(file_path, 'r') as file:
        return json.load(file)

def compare_averages_with_budget(averages, budget):
    """Compare spending averages with budget amounts."""
    differences = []
    for category, budget_amount in budget.items():
        average = averages.get(category, 0)  # Default to 0 if category is not in the budget
        average = -average if average != 0 else 0  # Convert to amount spent
        difference = budget_amount - average

        if budget_amount == 0:
            if average != 0:
                percent = 100
            else:
                percent = 0
        else:
            percent = -int(difference / budget_amount * 100)

        differences.append({
            'Category': category,
            'Average': average,
            'Budget': budget_amount,
            'Difference': difference,
            'Percent': percent
        })
    return differences

def apply_conditional_formatting(file_path):
    """Apply conditional formatting to the Percent column in the Excel file."""
    workbook = load_workbook(file_path)
    sheet = workbook.active

    # Define red fill for Percent > 10%
    red_fill = PatternFill(start_color="FF0000", end_color="FF0000", fill_type="solid")
    sheet.conditional_formatting.add(
        'E2:E1048576',  # Assuming 'Percent' is in column E
        CellIsRule(operator='greaterThan', formula=['10'], fill=red_fill)
    )

    # Define yellow fill for 5% <= Percent <= 10%
    yellow_fill = PatternFill(start_color="FFFF00", end_color="FFFF00", fill_type="solid")
    sheet.conditional_formatting.add(
        'E2:E1048576',
        CellIsRule(operator='between', formula=['5', '10'], fill=yellow_fill)
    )

    # Save the workbook with formatting applied
    workbook.save(file_path)

def set_sheet_name_to_date(file_path):
    """Set the sheet name in the Excel file to the current date."""
    workbook = load_workbook(file_path)
    current_date = datetime.datetime.now().strftime('%Y-%m-%d')  # Format the date as YYYY-MM-DD
    sheet = workbook.active
    sheet.title = current_date  # Set the sheet name to the current date
    workbook.save(file_path)

def main():
    # Parse command-line arguments
    parser = argparse.ArgumentParser(description='Compare YNAB spending averages with budget data.')
    parser.add_argument('budget_file', type=str, help='Path to the budget JSON file')
    parser.add_argument('--output', type=str, default='comparison_results.xlsx', help='Path to the output Excel file')
    args = parser.parse_args()

    # Load budget data
    budget_data = load_budget(args.budget_file)

    # Get spending averages for 1, 3, and 12 months
    n_months_list = [1, 3, 12]
    spending_data = get_ynab_spending_averages(n_months_list)

    # Create a DataFrame to store all comparisons
    all_differences = []

    # Compare each set of averages with the budget
    for item in spending_data:
        n_months = item['months']
        averages = item['averages']
        differences = compare_averages_with_budget(averages, budget_data['budget'])
        for diff in differences:
            diff['Months'] = n_months  # Add the number of months to each row
        all_differences.extend(differences)

    # Convert the results to a pandas DataFrame
    df = pd.DataFrame(all_differences)

    # Set the column data type to currency for Average, Budget, and Difference
    currency_columns = ['Average', 'Budget', 'Difference']
    for col in currency_columns:
        df[col] = df[col].apply(lambda x: f"${x:,.2f}")

    # Set the column data type to percentage for Percent
    #df['Percent'] = df['Percent'].apply(lambda x: f"{x:.2f}%")

    # Sort the DataFrame by the category name then by the 'Months' column
    df.sort_values(by=['Category', 'Months'], inplace=True)

    # Write the DataFrame to an Excel file
    df.to_excel(args.output, index=False)

    # Apply conditional formatting to the Excel file
    apply_conditional_formatting(args.output)

    # Set the sheet name to the current date
    set_sheet_name_to_date(args.output)

    print(f"Comparison results saved to {args.output}")

if __name__ == '__main__':
    main()